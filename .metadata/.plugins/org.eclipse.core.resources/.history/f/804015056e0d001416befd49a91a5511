/**
 * 
 */

package com.crm.cgw.test;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.Socket;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.axis.AxisFault;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.InputStreamEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.nms.chargingwebservice.AddBalanceResp;
import com.nms.chargingwebservice.ChangeExpiredDateResp;
import com.nms.chargingwebservice.ChangeStateResp;
import com.nms.chargingwebservice.DeductBalanceResp;
import com.nms.chargingwebservice.ExtDebitReq;
import com.nms.chargingwebservice.ExtDebitResp;
import com.nms.chargingwebservice.SetBalanceResp;
import com.nms.chargingwebservice.SubscriberRetrieveReq;
import com.nms.chargingwebservice.SubscriberRetrieveResp;
import com.fss.util.AppException;

/**
 * @author HungDT
 */
public class CGWQuery
{
	public static String	dateFormat	= "yyyy-MM-dd'T'HH:mm:ss.SSSSSSSZ";

	public static String	uri			= "";
	public static String	path		= "";
	public static String	username	= "client1";
	public static String	password	= "client1";
	public static int		timeout		= 30000;
	public static String	host		= "";
	public static int		port		= 8080;

	public static String stringFromDate(Date date)
	{
		SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
		return sdf.format(date);
	}

	public static Date dateFromString(String date) throws ParseException
	{
		date = date.substring(0, date.length() - 3) + "00";
		SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);

		return sdf.parse(date);
	}

	public static Socket openSocket(String uri) throws IOException
	{
		URL url = new URL(uri);

		host = url.getHost();
		port = url.getPort();
		path = url.getPath();

		if (port < 0)
		{
			port = 80;
		}

		InetAddress addrIP = InetAddress.getByName(host);
		Socket socket = new Socket(addrIP, port);
		socket.setTcpNoDelay(true);
		//socket.setSoLinger(true, 0);
		socket.setKeepAlive(true);
		//socket.setReuseAddress(true);
		
		if (timeout > 0)
		{
			socket.setSoTimeout(timeout);
		}

		return socket;
	}

	public static String doRequest(BufferedWriter writer, BufferedReader reader, String content) throws Exception
	{
		int count = 0;
		String line;
		try
		{
			
			writer.write(content);
			writer.flush();
			
			while ((line = reader.readLine()) == null && count < 10)
			{
				count =+ 1;
				Thread.sleep(100);
			}
			StringBuilder response = new StringBuilder();
			
			while ((line = reader.readLine()) != null)
			{
				response.append(line);
				response.append("\r\n");
			}
			
			/**
			 * remove last \r\n
			 */
			return response.toString();
			// return response.substring(0, response.length() - 2);
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			throw ex;
		}
		finally
		{
		}
	}

	public static String getTextValue(Element element, String tagName)
	{
		String textVal = null;

		NodeList nl = element.getElementsByTagName(tagName);

		if (nl != null && nl.getLength() > 0)
		{
			Element el = (Element) nl.item(0);
			textVal = el.getFirstChild().getNodeValue();
		}

		return textVal;
	}

	public static Document parseResponse(String response) throws ParserConfigurationException, SAXException, IOException
	{
		String xmlContent = response;
		Document document = null;
		
		xmlContent = xmlContent.substring(response.indexOf("<soap:Envelope"));

		xmlContent = xmlContent.replace("\n0", "");

		xmlContent = "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + xmlContent;

		// System.out.println(xmlContent);

		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		factory.setNamespaceAware(true);

		DocumentBuilder builder = factory.newDocumentBuilder();

		document = builder.parse(new InputSource(new StringReader(xmlContent)));

		NodeList nodeList = document.getElementsByTagName("soap:Fault");

		if (nodeList != null)
		{
			if (nodeList.getLength() > 0)
			{
				AxisFault fault = null;

				try
				{
					fault = new AxisFault();
					Element element = (Element) nodeList.item(0);
					String faultString = getTextValue(element, "faultstring");
					String detail = element.getElementsByTagName("detail").item(0).getTextContent();

					fault.setFaultString(faultString);
					fault.setFaultDetailString(detail);

				}
				catch (Exception e)
				{
					fault = new AxisFault();
					fault.setFaultString("CGW Internal Server Error");
					fault.setFaultDetailString(nodeList.item(0).getTextContent());
				}

				throw fault;
			}
		}

		return document;
	}

	public static AddBalanceResp addBalance(
			BufferedWriter writer, BufferedReader reader, String isdn, String balanceName, int addValue)
			throws Exception //IOException, ParserConfigurationException, SAXException
	{
		AddBalanceResp resp = new AddBalanceResp();

		StringBuilder strXml = new StringBuilder();

		/**
		 * Append xmlData
		 */
		strXml.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		strXml.append("<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" ");
		strXml.append("xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" ");
		strXml.append("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">");
		strXml.append("<soapenv:Body>");
		strXml.append("<AddBalance xmlns=\"http://iwebservice.elcom.com\"><in0>");
		strXml.append("<addValue>" + addValue + "</addValue>");
		strXml.append("<balance>" + balanceName + "</balance>");
		strXml.append("<msisdn>" + isdn + "</msisdn>");
		strXml.append("<password>" + password + "</password>");
		strXml.append("<timeout>" + timeout + "</timeout>");
		strXml.append("<userName>" + username + "</userName>");
		strXml.append("</in0></AddBalance>");
		strXml.append("</soapenv:Body>");
		strXml.append("</soapenv:Envelope>");

		int length = strXml.length();
		/**
		 * Add Header
		 */
		StringBuilder sbContent = new StringBuilder();
		sbContent.append("POST " + path + " HTTP/1.0\r\n");
		sbContent.append("Content-Type: text/xml; charset=utf-8\r\n");
		// sbContent.append("Accept: application/soap+xml, application/dime, multipart/related, text/*\r\n");
		// sbContent.append("User-Agent: Axis/1.4\r\n");
		sbContent.append("Host: " + host + ":" + port + "\r\n");
		// sbContent.append("Connection: Keep-Alive\r\n");
		sbContent.append("Cache-Control: no-cache\r\n");
		sbContent.append("Pragma: no-cache\r\n");
		sbContent.append("SOAPAction: \"\"\r\n");
		sbContent.append("Content-Length: " + length + "\r\n");

		sbContent.append("\r\n");
		sbContent.append(strXml);

		String response = doRequest(writer, reader, sbContent.toString());

		Document doc = parseResponse(response);

		/**
		 * addValue response
		 */
		Element addValueElement = (Element) doc.getElementsByTagName("addValue").item(0);
		resp.setAddValue(Integer.parseInt(addValueElement.getTextContent()));

		/**
		 * balanceName resp
		 */

		Element balanceElement = (Element) doc.getElementsByTagName("balance").item(0);
		resp.setBalance(balanceElement.getTextContent());

		/**
		 * detail resp
		 */
		Element detailElement = (Element) doc.getElementsByTagName("detail").item(0);
		resp.setDetail(detailElement.getTextContent());

		/**
		 * msisdn resp
		 */
		Element msisdnElement = (Element) doc.getElementsByTagName("msisdn").item(0);
		resp.setMsisdn(msisdnElement.getTextContent());

		/**
		 * result resp
		 */
		Element resultElement = (Element) doc.getElementsByTagName("result").item(0);
		resp.setResult(Integer.parseInt(resultElement.getTextContent()));

		return resp;
	}

	public static DeductBalanceResp deductBalance(
			BufferedWriter writer, BufferedReader reader, String deductValue, String balanceName, String isdn)
			throws Exception //IOException, ParserConfigurationException, SAXException
	{
		DeductBalanceResp resp = new DeductBalanceResp();

		StringBuilder strXml = new StringBuilder();

		/**
		 * Append xmlData
		 */
		strXml.append("<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:iweb=\"http://iwebservice.elcom.com\">");
		strXml.append("<soapenv:Header/>");
		strXml.append("<soapenv:Body>");
		strXml.append("<iweb:DeductBalance>");
		strXml.append("<iweb:in0>");
		// value
		strXml.append("<iweb:deductValue>");
		strXml.append(deductValue);
		strXml.append("</iweb:deductValue>");
		// balance name
		strXml.append("<iweb:balance>");
		strXml.append(balanceName);
		strXml.append("</iweb:balance>");
		// isdn
		strXml.append("<iweb:msisdn>");
		strXml.append(isdn);
		strXml.append("</iweb:msisdn>");
		// password
		strXml.append("<iweb:password>");
		strXml.append(password);
		strXml.append("</iweb:password>");
		// timeout
		strXml.append("<iweb:timeout>");
		strXml.append(timeout);
		strXml.append("</iweb:timeout>");
		// username
		strXml.append("<iweb:userName>");
		strXml.append(username);
		strXml.append("</iweb:userName>");
		strXml.append("</iweb:in0>");
		strXml.append("</iweb:DeductBalance>");
		strXml.append("</soapenv:Body>");
		strXml.append("</soapenv:Envelope>");

		int length = strXml.length();
		/**
		 * Add Header
		 */
		StringBuilder sbContent = new StringBuilder();
		sbContent.append("POST " + path + " HTTP/1.1\r\n");
		sbContent.append("Accept-Encoding: gzip,deflate\r\n");
		sbContent.append("Content-Type: text/xml; charset=\"utf-8\"\r\n");
		sbContent.append("SOAPAction: \"\r\n");
		sbContent.append("Content-Length: " + length + "\r\n");
		sbContent.append("Host: " + host + ":" + port + "\r\n");
		sbContent.append("Connection: Keep-Alive\r\n");
		sbContent.append("User-Agent: Apache-HttpClient/4.1.1 (java 1.5)\r\n");
		sbContent.append("\r\n");
		sbContent.append(strXml);

		String response = doRequest(writer, reader, sbContent.toString());

		Document doc = parseResponse(response);

		/**
		 * addValue response
		 */
		Element addValueElement = (Element) doc.getElementsByTagName("deductValue").item(0);
		resp.setDeductValue(Integer.parseInt(addValueElement.getTextContent()));

		/**
		 * balanceName resp
		 */

		Element balanceElement = (Element) doc.getElementsByTagName("balance").item(0);
		resp.setBalance(balanceElement.getTextContent());

		/**
		 * detail resp
		 */
		Element detailElement = (Element) doc.getElementsByTagName("detail").item(0);
		resp.setDetail(detailElement.getTextContent());

		/**
		 * msisdn resp
		 */
		Element msisdnElement = (Element) doc.getElementsByTagName("msisdn").item(0);
		resp.setMsisdn(msisdnElement.getTextContent());

		/**
		 * result resp
		 */
		Element resultElement = (Element) doc.getElementsByTagName("result").item(0);
		resp.setResult(Integer.parseInt(resultElement.getTextContent()));

		return resp;
	}

	public static SetBalanceResp settBalance(
			BufferedWriter writer, BufferedReader reader, String value, String balanceName, String isdn)
			throws Exception //IOException, ParserConfigurationException, SAXException
	{
		SetBalanceResp resp = new SetBalanceResp();

		StringBuilder strXml = new StringBuilder();

		/**
		 * Append xmlData
		 */
		strXml.append("<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:iweb=\"http://iwebservice.elcom.com\">");
		strXml.append("<soapenv:Header/>");
		strXml.append("<soapenv:Body>");
		strXml.append("<iweb:SetBalance>");
		strXml.append("<iweb:in0>");
		// value
		strXml.append("<iweb:value>");
		strXml.append(value);
		strXml.append("</iweb:value>");
		// balance name
		strXml.append("<iweb:balanceName>");
		strXml.append(balanceName);
		strXml.append("</iweb:balanceName>");
		// isdn
		strXml.append("<iweb:msisdn>");
		strXml.append(isdn);
		strXml.append("</iweb:msisdn>");
		// password
		strXml.append("<iweb:password>");
		strXml.append(password);
		strXml.append("</iweb:password>");
		// timeout
		strXml.append("<iweb:timeout>");
		strXml.append(timeout);
		strXml.append("</iweb:timeout>");
		// username
		strXml.append("<iweb:userName>");
		strXml.append(username);
		strXml.append("</iweb:userName>");
		strXml.append("</iweb:in0>");
		strXml.append("</iweb:SetBalance>");
		strXml.append("</soapenv:Body>");
		strXml.append("</soapenv:Envelope>");

		int length = strXml.length();
		/**
		 * Add Header
		 */
		StringBuilder sbContent = new StringBuilder();
		sbContent.append("POST " + path + " HTTP/1.1\r\n");
		sbContent.append("Accept-Encoding: gzip,deflate\r\n");
		sbContent.append("Content-Type: text/xml; charset=\"utf-8\"\r\n");
		sbContent.append("SOAPAction: \"\r\n");
		sbContent.append("Content-Length: " + length + "\r\n");
		sbContent.append("Host: " + host + ":" + port + "\r\n");
		sbContent.append("Connection: Keep-Alive\r\n");
		sbContent.append("User-Agent: Apache-HttpClient/4.1.1 (java 1.5)\r\n");
		sbContent.append("\r\n");
		sbContent.append(strXml);

		String response = doRequest(writer, reader, sbContent.toString());

		Document doc = parseResponse(response);

		/**
		 * addValue response
		 */
		Element addValueElement = (Element) doc.getElementsByTagName("value").item(0);
		resp.setValue(Integer.parseInt(addValueElement.getTextContent()));

		/**
		 * balanceName resp
		 */

		Element balanceElement = (Element) doc.getElementsByTagName("balance").item(0);
		resp.setBalance(balanceElement.getTextContent());

		/**
		 * detail resp
		 */
		Element detailElement = (Element) doc.getElementsByTagName("detail").item(0);
		resp.setDetail(detailElement.getTextContent());

		/**
		 * msisdn resp
		 */
		Element msisdnElement = (Element) doc.getElementsByTagName("msisdn").item(0);
		resp.setMsisdn(msisdnElement.getTextContent());

		/**
		 * result resp
		 */
		Element resultElement = (Element) doc.getElementsByTagName("result").item(0);
		resp.setResult(Integer.parseInt(resultElement.getTextContent()));

		return resp;
	}

	public static ChangeExpiredDateResp changeExpiredDate(
			BufferedWriter writer, BufferedReader reader, String expiredDate, String balanceName, String isdn)
			throws Exception //IOException, ParserConfigurationException, SAXException
	{
		ChangeExpiredDateResp resp = new ChangeExpiredDateResp();

		StringBuilder strXml = new StringBuilder();

		/**
		 * Append xmlData
		 */
		strXml.append("<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:iweb=\"http://iwebservice.elcom.com\">");
		strXml.append("<soapenv:Header/>");
		strXml.append("<soapenv:Body>");
		strXml.append("<iweb:ChangeExpiredDate>");
		strXml.append("<iweb:in0>");
		// value
		strXml.append("<iweb:expiredDate>");
		strXml.append(expiredDate);
		strXml.append("</iweb:expiredDate>");
		// balance name
		strXml.append("<iweb:balance>");
		strXml.append(balanceName);
		strXml.append("</iweb:balance>");
		// isdn
		strXml.append("<iweb:msisdn>");
		strXml.append(isdn);
		strXml.append("</iweb:msisdn>");
		// password
		strXml.append("<iweb:password>");
		strXml.append(password);
		strXml.append("</iweb:password>");
		// timeout
		strXml.append("<iweb:timeout>");
		strXml.append(timeout);
		strXml.append("</iweb:timeout>");
		// username
		strXml.append("<iweb:userName>");
		strXml.append(username);
		strXml.append("</iweb:userName>");
		strXml.append("</iweb:in0>");
		strXml.append("</iweb:ChangeExpiredDate>");
		strXml.append("</soapenv:Body>");
		strXml.append("</soapenv:Envelope>");

		int length = strXml.length();
		/**
		 * Add Header
		 */
		StringBuilder sbContent = new StringBuilder();
		sbContent.append("POST " + path + " HTTP/1.1\r\n");
		sbContent.append("Accept-Encoding: gzip,deflate\r\n");
		sbContent.append("Content-Type: text/xml; charset=\"utf-8\"\r\n");
		sbContent.append("SOAPAction: \"\r\n");
		sbContent.append("Content-Length: " + length + "\r\n");
		sbContent.append("Host: " + host + ":" + port + "\r\n");
		sbContent.append("Connection: Keep-Alive\r\n");
		sbContent.append("User-Agent: Apache-HttpClient/4.1.1 (java 1.5)\r\n");
		sbContent.append("\r\n");
		sbContent.append(strXml);

		String response = doRequest(writer, reader, sbContent.toString());

		Document doc = parseResponse(response);

		/**
		 * addValue response
		 */
		Element addValueElement = (Element) doc.getElementsByTagName("expiredDate").item(0);
		resp.setExpiredDate(addValueElement.getTextContent());

		/**
		 * balanceName resp
		 */

		Element balanceElement = (Element) doc.getElementsByTagName("balance").item(0);
		resp.setBalance(balanceElement.getTextContent());

		/**
		 * detail resp
		 */
		Element detailElement = (Element) doc.getElementsByTagName("detail").item(0);
		resp.setDetail(detailElement.getTextContent());

		/**
		 * msisdn resp
		 */
		Element msisdnElement = (Element) doc.getElementsByTagName("msisdn").item(0);
		resp.setMsisdn(msisdnElement.getTextContent());

		/**
		 * result resp
		 */
		Element resultElement = (Element) doc.getElementsByTagName("result").item(0);
		resp.setResult(Integer.parseInt(resultElement.getTextContent()));

		return resp;
	}

	public static ChangeStateResp changeState(
			BufferedWriter writer, BufferedReader reader, String state, String isdn)
			throws Exception //IOException, ParserConfigurationException, SAXException
	{
		ChangeStateResp resp = new ChangeStateResp();

		StringBuilder strXml = new StringBuilder();

		/**
		 * Append xmlData
		 */
		strXml.append("<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:iweb=\"http://iwebservice.elcom.com\">");
		strXml.append("<soapenv:Header/>");
		strXml.append("<soapenv:Body>");
		strXml.append("<iweb:ChangeState>");
		strXml.append("<iweb:in0>");
		// state
		strXml.append("<iweb:state>");
		strXml.append(state);
		strXml.append("</iweb:state>");
		// isdn
		strXml.append("<iweb:msisdn>");
		strXml.append(isdn);
		strXml.append("</iweb:msisdn>");
		// password
		strXml.append("<iweb:password>");
		strXml.append(password);
		strXml.append("</iweb:password>");
		// timeout
		strXml.append("<iweb:timeout>");
		strXml.append(timeout);
		strXml.append("</iweb:timeout>");
		// username
		strXml.append("<iweb:userName>");
		strXml.append(username);
		strXml.append("</iweb:userName>");
		strXml.append("</iweb:in0>");
		strXml.append("</iweb:ChangeState>");
		strXml.append("</soapenv:Body>");
		strXml.append("</soapenv:Envelope>");

		int length = strXml.length();
		/**
		 * Add Header
		 */
		StringBuilder sbContent = new StringBuilder();
		sbContent.append("POST " + path + " HTTP/1.1\r\n");
		sbContent.append("Accept-Encoding: gzip,deflate\r\n");
		sbContent.append("Content-Type: text/xml; charset=\"utf-8\"\r\n");
		sbContent.append("SOAPAction: \"\r\n");
		sbContent.append("Content-Length: " + length + "\r\n");
		sbContent.append("Host: " + host + ":" + port + "\r\n");
		sbContent.append("Connection: Keep-Alive\r\n");
		sbContent.append("User-Agent: Apache-HttpClient/4.1.1 (java 1.5)\r\n");
		sbContent.append("\r\n");
		sbContent.append(strXml);

		String response = doRequest(writer, reader, sbContent.toString());

		Document doc = parseResponse(response);

		/**
		 * addValue response
		 */
		Element addValueElement = (Element) doc.getElementsByTagName("state").item(0);
		resp.setState(addValueElement.getTextContent());

		/**
		 * detail resp
		 */
		Element detailElement = (Element) doc.getElementsByTagName("detail").item(0);
		resp.setDetail(detailElement.getTextContent());

		/**
		 * msisdn resp
		 */
		Element msisdnElement = (Element) doc.getElementsByTagName("msisdn").item(0);
		resp.setMsisdn(msisdnElement.getTextContent());

		/**
		 * result resp
		 */
		Element resultElement = (Element) doc.getElementsByTagName("result").item(0);
		resp.setResult(Integer.parseInt(resultElement.getTextContent()));

		return resp;
	}
	public static ExtDebitResp ExtDebit(
			BufferedWriter writer, BufferedReader reader, ExtDebitReq request)
			throws Exception //IOException, ParserConfigurationException, SAXException
	{
		ExtDebitResp resp = new ExtDebitResp();

		StringBuilder strXml = new StringBuilder();

		/**
		 * Append xmlData
		 */
		strXml.append("<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:iweb=\"http://iwebservice.elcom.com\">");
		strXml.append("<soapenv:Header/>");
		strXml.append("<soapenv:Body>");
		strXml.append("<iweb:ExtDebit>");
        strXml.append("<iweb:in0>");
        
        strXml.append("<iweb:ANumber>");
        strXml.append(request.getANumber());
        strXml.append("</iweb:ANumber>");
        
        strXml.append("<iweb:BNumber>");
        strXml.append(request.getBNumber());
        strXml.append("</iweb:BNumber>");
        
        strXml.append("<iweb:CPId>");
        strXml.append(request.getCPId());
        strXml.append("</iweb:CPId>");
        
        strXml.append("<iweb:CPName>");
        strXml.append(request.getCPName());
        strXml.append("</iweb:CPName>");
        
        strXml.append("<iweb:contCode>");
        strXml.append(request.getContCode());
        strXml.append("</iweb:contCode>");
        
        strXml.append("<iweb:contType>");
        strXml.append(request.getContType());
        strXml.append("</iweb:contType>");
        
        strXml.append("<iweb:desc>");
        strXml.append(request.getDesc());
        strXml.append("</iweb:desc>");
        
        strXml.append("<iweb:password>");
        strXml.append(request.getPassword());
        strXml.append("</iweb:password>");
        
        strXml.append("<iweb:sentTime>");
        strXml.append(request.getSentTime());
        strXml.append("</iweb:sentTime>");
        
        strXml.append("<iweb:serviceState>");
        strXml.append(request.getServiceState());
        strXml.append("</iweb:serviceState>");
        
        strXml.append("<iweb:submitTime>");
        strXml.append(request.getSubmitTime());
        strXml.append("</iweb:submitTime>");
        
        strXml.append("<iweb:timeout>");
        strXml.append(request.getTimeout());
        strXml.append("</iweb:timeout>");
        
        strXml.append("<iweb:transDateTime>");
        strXml.append(request.getTransDateTime());
        strXml.append("</iweb:transDateTime>");
        
        strXml.append("<iweb:userName>");
        strXml.append(request.getUserName());
        strXml.append("</iweb:userName>");
        strXml.append("</iweb:in0>");
        strXml.append("</iweb:ExtDebit>");
        strXml.append("</soapenv:Body>");
		strXml.append("</soapenv:Envelope>");

		int length = strXml.length();
		/**
		 * Add Header
		 */
		StringBuilder sbContent = new StringBuilder();
		sbContent.append("POST " + path + " HTTP/1.1\r\n");
		sbContent.append("Accept-Encoding: gzip,deflate\r\n");
		sbContent.append("Content-Type: text/xml; charset=\"utf-8\"\r\n");
		sbContent.append("SOAPAction: \"\r\n");
		sbContent.append("Content-Length: " + length + "\r\n");
		sbContent.append("Host: " + host + ":" + port + "\r\n");
		sbContent.append("Connection: Keep-Alive\r\n");
		sbContent.append("User-Agent: Apache-HttpClient/4.1.1 (java 1.5)\r\n");
		sbContent.append("\r\n");
		sbContent.append(strXml);

		String response = doRequest(writer, reader, sbContent.toString());

		Document doc = parseResponse(response);


		/**
		 * detail resp
		 */
		Element detailElement = (Element) doc.getElementsByTagName("detail").item(0);
		resp.setDetail(detailElement.getTextContent());

		/**
		 * msisdn resp
		 */
		Element msisdnElement = (Element) doc.getElementsByTagName("msisdn").item(0);
		resp.setMsisdn(msisdnElement.getTextContent());

		/**
		 * result resp
		 */
		Element resultElement = (Element) doc.getElementsByTagName("result").item(0);
		resp.setResult(Integer.parseInt(resultElement.getTextContent()));

		return resp;
	}
	public static SubscriberRetrieveResp getRetrieveSubscriber(BufferedWriter writer, BufferedReader reader, SubscriberRetrieveReq request)
				  throws Exception //IOException, ParserConfigurationException, SAXException
	{
		SubscriberRetrieveResp resp = new SubscriberRetrieveResp();
		StringBuilder strXml = new StringBuilder();

		/**
		 * Append xmlData
		 */
		strXml.append("<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:iweb=\"http://iwebservice.elcom.com\">");
		strXml.append("<soapenv:Header/>");
		strXml.append("<soapenv:Body>");
		strXml.append("<iweb:RetrieveSubscriber>");
		strXml.append("<iweb:in0>");
		
		strXml.append("<iweb:msisdn>");
		strXml.append(request.getMsisdn());
		strXml.append("</iweb:msisdn>");
		
		strXml.append("<iweb:password>");
		strXml.append(request.getPassword());
		strXml.append("</iweb:password>");
		
		strXml.append("<iweb:timeout>");
		strXml.append(request.getTimeout());
		strXml.append("</iweb:timeout>");
		
		strXml.append("<iweb:username>");
		strXml.append(request.getUsername());
		strXml.append("</iweb:username>");
		
		strXml.append("</iweb:in0>");
		strXml.append("</iweb:RetrieveSubscriber>");
        strXml.append("</soapenv:Body>");
		strXml.append("</soapenv:Envelope>");

		int length = strXml.length();
		/**
		 * Add Header
		 */
		StringBuilder sbContent = new StringBuilder();
		sbContent.append("POST " + path + " HTTP/1.1\r\n");
		sbContent.append("Accept-Encoding: gzip,deflate\r\n");
		sbContent.append("Content-Type: text/xml; charset=\"utf-8\"\r\n");
		sbContent.append("SOAPAction: \"\r\n");
		sbContent.append("Content-Length: " + length + "\r\n");
		sbContent.append("Host: " + host + ":" + port + "\r\n");
		sbContent.append("Connection: Keep-Alive\r\n");
		sbContent.append("User-Agent: Apache-HttpClient/4.1.1 (java 1.5)\r\n");
		sbContent.append("\r\n");
		sbContent.append(strXml);

		String response = doRequest(writer, reader, sbContent.toString());

		Document doc = parseResponse(response);


		/**
		 * detail resp
		 */
		Element detailElement = (Element) doc.getElementsByTagName("detail").item(0);
		resp.setDetail(detailElement.getTextContent());

		/**
		 * msisdn resp
		 */
		Element msisdnElement = (Element) doc.getElementsByTagName("msisdn").item(0);
		resp.setMsisdn(msisdnElement.getTextContent());

		/**
		 * result resp
		 */
		Element resultElement = (Element) doc.getElementsByTagName("result").item(0);
		resp.setResult(Integer.parseInt(resultElement.getTextContent()));		
		return resp;
	}
	public static SubscriberRetrieveResp getRetrieveSubscriber(SubscriberRetrieveReq request,String uri) throws Exception
	{
		SubscriberRetrieveResp resp = new SubscriberRetrieveResp();
		StringBuilder strXml = new StringBuilder();
		CloseableHttpResponse response = null;
		
		URL url = new URL(uri);

		host = url.getHost();
		port = url.getPort();
		path = url.getPath();
		
		strXml.append("<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:iweb=\"http://iwebservice.elcom.com\">");
		strXml.append("<soapenv:Header/>");
		strXml.append("<soapenv:Body>");
		strXml.append("<iweb:RetrieveSubscriber>");
		strXml.append("<iweb:in0>");
		
		strXml.append("<iweb:msisdn>");
		strXml.append(request.getMsisdn());
		strXml.append("</iweb:msisdn>");
		
		strXml.append("<iweb:password>");
		strXml.append(request.getPassword());
		strXml.append("</iweb:password>");
		
		strXml.append("<iweb:timeout>");
		strXml.append(request.getTimeout());
		strXml.append("</iweb:timeout>");
		
		strXml.append("<iweb:username>");
		strXml.append(request.getUsername());
		strXml.append("</iweb:username>");
		
		strXml.append("</iweb:in0>");
		strXml.append("</iweb:RetrieveSubscriber>");
        strXml.append("</soapenv:Body>");
		strXml.append("</soapenv:Envelope>");

		int length = strXml.length();
		/**
		 * Add Header
		 */
		StringBuilder sbContent = new StringBuilder();
		sbContent.append("POST " + path + " HTTP/1.1\r\n");
		sbContent.append("Accept-Encoding: gzip,deflate\r\n");
		sbContent.append("Content-Type: text/xml; charset=utf-8\r\n");
		sbContent.append("SOAPAction: \"\"");
		sbContent.append("Content-Length: " + length + "\r\n");
		sbContent.append("Host: " + host + ":" + port + "\r\n");
//		sbContent.append("Connection: Keep-Alive\r\n");
		sbContent.append("User-Agent: Apache-HttpClient/4.1.1 (java 1.5)\r\n");
		sbContent.append("\r\n");
		sbContent.append(strXml);
		
		CloseableHttpClient httpClient = HttpClients.createDefault();
		HttpPost httpPost = null;
		
		try
		{
			httpPost = new HttpPost(uri);
			ByteArrayInputStream stream = new ByteArrayInputStream(sbContent.toString().getBytes());
			httpPost.setEntity(new InputStreamEntity(stream, sbContent.length()));
			
			response = httpClient.execute(httpPost);
			HttpEntity entity = httpPost.getEntity();
			
			if (entity != null && !checkError(response))
			{
				//return EntityUtils.toString(entity);
			}			
		}
		catch (Exception ex)
		{
			
		}
		finally
		{
			safeClose(httpPost);
			safeClose(httpPost);
			safeClose(httpClient);		
		}
		
		return resp;
	}
	public static boolean checkError(HttpResponse response) throws AppException
	{
		if (response.getStatusLine().getStatusCode() == 200)
		{
			return false;
		}
		else
		{
			String errorContent = "";

			try
			{
				errorContent = EntityUtils.toString(response.getEntity());
			}
			catch (Exception e)
			{
				e.printStackTrace();
			}

			throw new AppException(errorContent);
		}
	}
	public static void safeClose(Object object) throws Exception
	{
		if (object != null)
		{
			try
			{
				if (object instanceof CloseableHttpResponse)
				{
					((CloseableHttpResponse) object).close();
				}
				else if (object instanceof CloseableHttpClient)
				{
					((CloseableHttpClient) object).close();
				}
				else if (object instanceof HttpPost)
				{
					((HttpPost) object).releaseConnection();
				}
			}
			catch (Exception e)
			{
				e.printStackTrace();
			}
		}
	}	
}
