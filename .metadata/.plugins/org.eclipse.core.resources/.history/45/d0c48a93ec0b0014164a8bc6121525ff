/**
 * ----------------------------------------------------------------- 
 * @ Copyright(c) 2013 Vietnamobile. JSC. All Rights Reserved.
 * ----------------------------------------------------------------- 
 * Date 	Author 		Version
 * ------------------------------------- 
 * Oct 6, 2013 hungdt  v1.0
 * -------------------------------------
 */
package com.crm.provisioning.impl.vinaphone;

import java.util.Date;

import com.crm.product.cache.ProductEntry;
import com.crm.product.cache.ProductFactory;
import com.crm.provisioning.cache.CommandEntry;
import com.crm.provisioning.cache.ProvisioningCommand;
import com.crm.provisioning.cache.ProvisioningFactory;
import com.crm.provisioning.impl.CommandImpl;
import com.crm.provisioning.impl.vms.SdpVmsConnection;
import com.crm.provisioning.message.CommandMessage;
import com.crm.provisioning.thread.CommandInstance;
import com.crm.provisioning.util.CommandUtil;
import com.crm.subscriber.impl.SubscriberOrderImpl;
import com.crm.util.AppProperties;
import com.crm.util.GeneratorSeq;

/**
 * @author hungdt
 * 
 */
public class VinaCommandImpl extends CommandImpl
{
	public CommandMessage sendSms(CommandInstance instance,
			ProvisioningCommand provisioningCommand, CommandMessage request)
			throws Exception
	{
		VinaConnection connection = null;
		CommandMessage result = request;
		try
		{
			CommandEntry command = ProvisioningFactory.getCache().getCommand(request.getCommandId());

			ProductEntry product = ProductFactory.getCache().getProduct(request.getProductId());

			command.setMaxRetry(1);

			String serviceId = product.getParameters().getString("sdp.service.serviceid", "");
			String productId = product.getParameters().getString("sdp.service.productcode", "");

			AppProperties app = new AppProperties();
			app.setString("serviceid", serviceId);
			app.setString("productid", productId);
			result.setParameters(app);
			String spId = product.getParameter("sdp.service.spid", "");
			String descKey = "sdp.description." + result.getActionType();

			String description = product.getParameter(descKey, "");

			description = description.replace("<ALIAS>", product.getIndexKey());

			connection = (VinaConnection) instance.getProvisioningConnection();

			String isdn = CommandUtil.addCountryCode(request.getIsdn());

//			int sessionId = GeneratorSeq.getNextSeq();
//
//			result.setSessionId(sessionId);
//			String requestStr = getRequestString(0, isdn, description, "", serviceId, spId, productId, result.getMsgContent());

			setRequest(instance, request, requestStr, sessionId);

			String identifier = connection.sendSms(instance, result);

			SubscriberOrderImpl.updateDeliveryStatus(result.getOrderId(), identifier, serviceId);

			result.setIdentifier(identifier);

//			String respStr = getResponseString("success", isdn, "SEND SMS", identifier);
//
//			setResponse(instance, request, respStr, sessionId);
		}
		catch (Exception e)
		{
			processError(instance, provisioningCommand, result, e);
		}

		finally
		{
			instance.closeProvisioningConnection(connection);
		}

		return result;
	}

	public CommandMessage sendWap(CommandInstance instance,
			ProvisioningCommand provisioningCommand, CommandMessage request)
			throws Exception
	{
		VinaConnection connection = null;
		CommandMessage result = request;
		try
		{
			CommandEntry command = ProvisioningFactory.getCache().getCommand(request.getCommandId());

			ProductEntry product = ProductFactory.getCache().getProduct(request.getProductId());

			command.setMaxRetry(1);

			String serviceId = product.getParameters().getString("sdp.service.serviceid", "");
			String productId = product.getParameters().getString("sdp.service.productcode", "");

			AppProperties app = new AppProperties();
			app.setString("serviceid", serviceId);
			app.setString("productid", productId);
			result.setParameters(app);
			String spId = product.getParameter("sdp.service.spid", "");

			String descKey = "sdp.description." + result.getActionType();

			String description = product.getParameter(descKey, "");

			description = description.replace("<ALIAS>", product.getIndexKey());

			connection = (VinaConnection) instance.getProvisioningConnection();

			String isdn = CommandUtil.addCountryCode(request.getIsdn());

//			int sessionId = GeneratorSeq.getNextSeq();
//
//			result.setSessionId(sessionId);
//
//			String requestStr = getWapRequestString(0, isdn, description, "", serviceId, spId, productId, result.getSubject(), result.getUrl());

			setRequest(instance, request, requestStr, sessionId);

			String identifier = connection.sendWap(instance, request);

			result.setIdentifier(identifier);

//			String respStr = getResponseString("success", isdn, "SEND WAP", identifier);
//
//			setResponse(instance, request, respStr, sessionId);

		}
		catch (Exception e)
		{
			processError(instance, provisioningCommand, result, e);
		}

		finally
		{
			instance.closeProvisioningConnection(connection);
		}

		return result;
	}

	public CommandMessage sendMT(CommandInstance instance,
			ProvisioningCommand provisioningCommand, CommandMessage request)
			throws Exception
	{
		VinaConnection connection = null;
		CommandMessage result = request;
		try
		{
			CommandEntry command = ProvisioningFactory.getCache().getCommand(request.getCommandId());

			ProductEntry product = ProductFactory.getCache().getProduct(request.getProductId());

			command.setMaxRetry(1);

			String serviceId = product.getParameters().getString("sdp.service.serviceid", "");
			String productId = product.getParameters().getString("sdp.service.productcode", "");

			AppProperties app = new AppProperties();
			app.setString("serviceid", serviceId);
			app.setString("productid", productId);
			result.setParameters(app);
			String spId = product.getParameter("sdp.service.spid", "");
			String descKey = "sdp.description." + result.getActionType();

			String description = product.getParameter(descKey, "");

			description = description.replace("<ALIAS>", product.getIndexKey());

			connection = (VinaConnection) instance.getProvisioningConnection();

			String isdn = CommandUtil.addCountryCode(request.getIsdn());

			int sessionId = GeneratorSeq.getNextSeq();

			result.setSessionId(sessionId);

			if (result.getMsgContent() != null)
			{
				String requestStr = getRequestString(0, isdn, description, "", serviceId, spId, productId, result.getMsgContent());

				setRequest(instance, request, requestStr, sessionId);

				String identifier = connection.sendSms(instance, result);

				SubscriberOrderImpl.updateDeliveryStatus(result.getOrderId(), identifier, serviceId);

				result.setIdentifier(identifier);

				String respStr = getResponseString("success", isdn, "SEND SMS", identifier);

				setResponse(instance, request, respStr, sessionId);
			}
			else if (result.getUrl() != null)
			{
				String requestStr = getWapRequestString(0, isdn, description, "", serviceId, spId, productId, result.getSubject(), result.getUrl());

				setRequest(instance, request, requestStr, sessionId);

				String identifier = connection.sendWap(instance, request);

				result.setIdentifier(identifier);

				String respStr = getResponseString("success", isdn, "SEND WAP", identifier);

				setResponse(instance, request, respStr, sessionId);
			}

			
		}
		catch (Exception e)
		{
			processError(instance, provisioningCommand, result, e);
		}

		finally
		{
			instance.closeProvisioningConnection(connection);
		}

		return result;
	}

//	public String getLogRequest(String funcionName, String isdn)
//	{
//		String log = funcionName + "{" + isdn + "}";
//		return log;
//	}
//
//	public String getLogRequest(String funcionName, String isdn,
//			long merchantId, String keyword, long productId)
//	{
//		String log = funcionName + "{isdn=" + isdn + " | cpid=" + merchantId + " | cmd=" + keyword + " | productid=" + productId + "}";
//		return log;
//	}
//
//	public String getLogRequest(String funcionName, String isdn,
//			long merchantId, long productId, int numSMS)
//	{
//		String log = funcionName + "{isdn=" + isdn + " | cpid=" + merchantId + " | productid=" + productId + " | numsms=" + numSMS + "}";
//		return log;
//	}
//
//	private String getRequestString(int requestNumber, String isdn,
//			String description, String identifier, String serviceId,
//			String spId, String productId, String content)
//	{
//		String requestString = "isdn=" + isdn + ", content=" + content + ", serviceid=" + serviceId + ", productid=" + productId + ", spid=" + spId
//				+ ", desc=" + description;
//
//		return requestString;
//	}
//
//	private String getWapRequestString(int requestNumber, String isdn,
//			String description, String identifier, String serviceId,
//			String spId, String productId, String subject, String url)
//	{
//		String requestString = "isdn=" + isdn + ", serviceid=" + serviceId + ", productid=" + productId + ", spid=" + spId + ", desc=" + description
//				+ ", subject=" + subject + ", url=" + url;
//
//		return requestString;
//	}
//
//	private String getResponseString(String delivery, String isdn,
//			String actionType, String identifier)
//	{
//		String responseString = "Identifier=" + identifier + ", status=" + delivery;
//		return responseString;
//	}
//
//	public void setRequest(CommandInstance instance, CommandMessage request,
//			String requestString, long sessionId) throws Exception
//	{
//		super.setRequest(instance, request, requestString, sessionId);
//		request.setRequestTime(new Date());
//	}
}
